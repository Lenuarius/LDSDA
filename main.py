from telethon import TelegramClient, events, functions
import asyncio
import time

# === –î–ê–ù–Ü ===
api_id = 23957413
api_hash = "bc7d03b7a971257f13cb8cc676dabe06"
phone = "+421952160825"
group_id = -1002452764624
main_user_id = 888387442

call_interval = 60
last_call_time = 0
active_call = None

client = TelegramClient("twin_account", api_id, api_hash)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ CreateGroupCall (–æ–∑–Ω–∞—á–∞—î, —â–æ –ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è –≥—Ä—É–ø–æ–≤—ñ –¥–∑–≤—ñ–Ω–∫–∏)
HAS_GROUP_CALL = hasattr(functions.phone, "CreateGroupCall")

async def get_or_create_group_call():
    """–ü–æ–≤–µ—Ä—Ç–∞—î —ñ—Å–Ω—É—é—á–∏–π –∞–±–æ —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –≥—Ä—É–ø–æ–≤–∏–π –¥–∑–≤—ñ–Ω–æ–∫ (—è–∫—â–æ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è)"""
    global active_call
    if active_call:
        return active_call

    try:
        chats = await client(functions.phone.GetGroupCallRequest(
            peer=await client.get_entity(group_id),
            limit=1
        ))
        if chats.call:
            active_call = chats.call
            return active_call
    except:
        pass

    if HAS_GROUP_CALL:
        print("üéô –°—Ç–≤–æ—Ä—é—é –Ω–æ–≤–∏–π –≥–æ–ª–æ—Å–æ–≤–∏–π —á–∞—Ç...")
        result = await client(functions.phone.CreateGroupCall(
            peer=await client.get_entity(group_id),
            random_id=client.rnd_id(),
        ))
        active_call = result.call
        return active_call
    else:
        return None

@client.on(events.NewMessage(chats=group_id))
async def handler(event):
    global last_call_time
    now = time.time()

    if now - last_call_time < call_interval:
        print("‚è≥ –ü—Ä–æ–ø—É—Å–∫–∞—é ‚Äî —â–µ –Ω–µ –º–∏–Ω—É–≤ —ñ–Ω—Ç–µ—Ä–≤–∞–ª.")
        return

    print(f"üì© –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {event.message.text}")

    if HAS_GROUP_CALL:
        try:
            call = await get_or_create_group_call()
            if call:
                await client(functions.phone.InviteToGroupCall(
                    call=call,
                    users=[await client.get_entity(main_user_id)]
                ))
                print("üìû –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è –Ω–∞ –≥—Ä—É–ø–æ–≤–∏–π –¥–∑–≤—ñ–Ω–æ–∫ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            else:
                # –Ø–∫—â–æ –∑ —è–∫–æ—ó—Å—å –ø—Ä–∏—á–∏–Ω–∏ –Ω–µ –≤–∏–π—à–ª–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –¥–∑–≤—ñ–Ω–æ–∫ ‚Äî fallback
                await client.send_message(main_user_id, "üìû –î–∑–≤—ñ–Ω–æ–∫! –ó–∞–π–¥–∏ –≤ –≥—Ä—É–ø—É.")
                print("üì¢ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –ø—ñ–Ω–≥ —É –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (fallback).")
        except Exception as e:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–∑–≤—ñ–Ω–∫–∞:", e)
            await client.send_message(main_user_id, "üìû –î–∑–≤—ñ–Ω–æ–∫! –ó–∞–π–¥–∏ –≤ –≥—Ä—É–ø—É.")
    else:
        # Fallback –¥–ª—è —Å—Ç–∞—Ä–∏—Ö –≤–µ—Ä—Å—ñ–π Telethon ‚Äî –ø–∏—à–µ–º–æ –≤ –õ–°
        await client.send_message(main_user_id, "üìû –î–∑–≤—ñ–Ω–æ–∫! –ó–∞–π–¥–∏ –≤ –≥—Ä—É–ø—É.")
        print("üì¢ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –ø—ñ–Ω–≥ —É –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

    last_call_time = now

async def main():
    await client.start(phone)
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π. –°–ª—É—Ö–∞—é –≥—Ä—É–ø—É...")
    await client.run_until_disconnected()

if __name__ == '__main__':
    asyncio.run(main())

